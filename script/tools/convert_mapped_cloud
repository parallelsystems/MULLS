#!/home/jack/.miniconda3/envs/mulls/bin/python
import os
import time
import open3d as o3d
import numpy as np
from scipy.spatial.transform import Rotation as R

BASEDIR = "/home/jack/mulls/done/"
scenes = [os.path.join(BASEDIR, scene) for scene in sorted(os.listdir(BASEDIR))]
basis_change = np.array([[-1, 0, 0], [0, -1, 0], [0, 0, 1]])

print(f"Using basis\n{basis_change}")
for scene in scenes:
    print(f"Converting scene {scene}...")
    scene_start = time.time()

    pcd = o3d.io.read_point_cloud(
        os.path.join(scene, "result/map_point_clouds/merged_map.pcd")
    )
    points = np.asarray(pcd.points)
    # apply basis change
    points = (basis_change @ points.T).T

    # dummy time column, we don't use this value but my point grapher expects it :)
    fake_times = np.zeros((len(points), 1))
    points = np.hstack((fake_times, points))
    np.savetxt(os.path.join(scene, "result/scene.xyz"), points, delimiter=",", fmt="%.18f")

    poses = np.genfromtxt(
        os.path.join(scene, "result/pose_l_lo_luminar.txt"),
        delimiter=" "
    ).reshape((-1, 3, 4))
    timestamps = np.genfromtxt(os.path.join(scene, "times.txt"))

    poses_ = []
    for timestamp, pose in zip(timestamps, poses):
        timestamp = [timestamp]

        quaternion = list(R.from_matrix(pose[:, :3]).as_quat())
        translation = list(basis_change @ pose[:, -1])

        poses_.append(timestamp + translation + quaternion)
    poses = np.array(poses_)

    np.savetxt(
        os.path.join(scene, "result/odom.csv"),
        poses,
        delimiter=",",
        fmt="%.18f"
    )
    print(f"\tFinished in {time.time()-scene_start}")